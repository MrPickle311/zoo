openapi: 3.0.1
info:
  title: Zoo API
  description: CRUD operations to interact with ZOO system
  version: 2.0.0
servers:
  - url: 'https'

tags:
  - name: zoo

paths:
  /zones:
    post:
      tags:
        - zoo
      operationId: addZone
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ZoneCreationDto"
      responses:
        '201':
          description: Zone has been created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExistingZone"
        '400':
          description: Data validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                AlreadyExists:
                  $ref: "#/components/examples/AlreadyExists"
                InvalidInputData:
                  $ref: "#/components/examples/InvalidInputData"
                InvalidInputDataAutomated:
                  $ref: "#/components/examples/InvalidInputDataAutomated"
        '500':
          $ref: "#/components/responses/ServerError"
  /zones/{zoneId}/animals:
    post:
      tags:
        - zoo
      operationId: addAnimal
      parameters:
        - $ref: "#/components/parameters/zoneId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnimalAssigmentDto"
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExistingAnimal"
          description: Created animal and assigned it to the zone
        '400':
          description: Data validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                InvalidInputData:
                  $ref: "#/components/examples/InvalidInputData"
                InvalidInputDataAutomated:
                  $ref: "#/components/examples/InvalidInputDataAutomated"
        '404':
          description: Related entity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                ZoneNotFound:
                  $ref: "#/components/examples/ZoneNotFound"
                AnimalTypeNotFound:
                  $ref: "#/components/examples/AnimalTypeNotFound"
        '500':
          $ref: "#/components/responses/ServerError"
    get:
      tags:
        - zoo
      operationId: getAnimals
      parameters:
        - $ref: "#/components/parameters/zoneId"
        - $ref: "#/components/parameters/size"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/shouldSortByName"
        - $ref: "#/components/parameters/sortDirection"
      responses:
        '200':
          description: Successfully acquired all animals for given zone
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExistingAnimalsList"
        '400':
          description: Data validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                ParametersValidationFailed:
                  $ref: "#/components/examples/ZoneNotFound"
                InvalidInputDataAutomated:
                  $ref: "#/components/examples/InvalidInputDataAutomated"
        '404':
          description: Related entity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                ZoneNotFound:
                  $ref: "#/components/examples/ZoneNotFound"
        '500':
          $ref: "#/components/responses/ServerError"
  /zones/{zoneId}/animals/{animalName}:
    get:
      tags:
        - zoo
      operationId: getAnimalsByName
      description: Gets all animals with given
      parameters:
        - $ref: "#/components/parameters/zoneId"
        - $ref: "#/components/parameters/size"
        - $ref: "#/components/parameters/page"
        - in: path
          name: animalName
          required: true
          description: Animal name which should be a single word
          schema:
            type: string
            pattern: '^[A-Za-z]+$'
            example: "Nancy"
      responses:
        '200':
          description: Successfully acquired the animals for given name and zone
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExistingAnimalsList"
        '400':
          description: Data validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                InvalidInputDataAutomated:
                  $ref: "#/components/examples/InvalidInputDataAutomated"
        '404':
          description: Related entity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                ZoneNotFound:
                  $ref: "#/components/examples/ZoneNotFound"
        '500':
          $ref: "#/components/responses/ServerError"
  /zones/animal-types:
    post:
      tags:
        - zoo
      operationId: addAnimalType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnimalTypeCreationDto"
      responses:
        '201':
          description: Successfully created animal type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExistingAnimalType"
        '400':
          description: Data validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                InvalidInputDataAutomated:
                  $ref: "#/components/examples/InvalidInputDataAutomated"
        '500':
          $ref: "#/components/responses/ServerError"
  /zones/requires-most-food:
    get:
      tags:
        - zoo
      description: Returns the zone where the most amount of food is required
      operationId: getZoneWhichRequiresMostFood
      responses:
        '200':
          description: Successfully acquired the zone where the most amount of food is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExistingZoneFoodReport"
        '404':
          description: "Zoo does not contain any zone. Cannot download the report"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                NoZonesPresentInZoo:
                  $ref: "#/components/examples/NoZonesPresentInZoo"
        '500':
          $ref: "#/components/responses/ServerError"
  /zones/least-animals:
    get:
      tags:
        - zoo
      description: Returns the zone where live least amount of animals
      operationId: zoneWhereLiveLeastAnimals
      responses:
        '200':
          description: Successfully acquired the zone where live least amount of animals
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExistingZoneAnimalsReport"
        '404':
          description: "Zoo does not contain any zone. Cannot download the report"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                NoZonesPresentInZoo:
                  $ref: "#/components/examples/NoZonesPresentInZoo"
        '500':
          $ref: "#/components/responses/ServerError"

components:
  examples:
    AlreadyExists:
      description: Occurs when entity with given identifier exists in the system
      value:
        code: ALREADY_EXISTS
        description: "Business data validation failed"
    InvalidInputData:
      description: Occurs when manual data validation fails
      value:
        code: INVALID_INPUT_DATA
        description: "Business data validation failed"
    InvalidInputDataAutomated:
      description: "Occurs when automatic data validation fails. 
      This comes when for example 'nullable: false' or 'pattern: ^[A-Za-z]+$' check fails. 
      This is specific to the schema, so read schema definitions to get know what kind of failures may occur"
      value:
        code: INVALID_INPUT_DATA
        description: "addAnimal.zoneId: must be greater than or equal to 0"
    UnknownError:
      description: Occurs when could not handle error
      value:
        code: UNKNOWN_ERROR
        description: "Internal server error"
    ZoneNotFound:
      description: Occurs when it's not possible to find zone with given id or name
      value:
        code: ZONE_NOT_FOUND
        description: "Requested data not found"
    AnimalTypeNotFound:
      description: Occurs when it's not possible to find animal type with given id or name
      value:
        code: ANIMAL_TYPE_NOT_FOUND
        description: "Requested data not found"
    NoZonesPresentInZoo:
      description: Occurs when there is not any zone in the system
      value:
        code: NO_ZONES_PRESENT_IN_ZOO
        description: "Zoo has not any zone"
  parameters:
    zoneId:
      in: path
      name: zoneId
      description: Zone id
      required: true
      schema:
        type: integer
        minimum: 0
    size:
      in: query
      name: size
      description: Size of the page (number of returned elements)
      required: false
      schema:
        type: integer
        minimum: 1
        example: 20
    page:
      in: query
      name: page
      description: Page number
      required: false
      schema:
        type: integer
        minimum: 0
        example: 2
    shouldSortByName:
      in: query
      name: shouldSortByName
      description: If true sorts results by "name" field. Order is selected by sortDirection property
      required: false
      schema:
        type: boolean
        example: true
    sortDirection:
      in: query
      name: sortDirection
      description: Order of sorting
      required: false
      schema:
        type: string
        enum:
          - ASC
          - DESC
        pattern: '^(ASC|DESC)$'
  schemas:
    ZoneCreationDto:
      type: object
      properties:
        name:
          type: string
          example: "FirstZone"
          nullable: false
          pattern: '^[A-Za-z]+$'
          description: Zone name which should be without whitespaces
      required:
        - name
    AnimalTypeCreationDto:
      type: object
      properties:
        name:
          type: string
          pattern: '^[A-Za-z]+$'
          nullable: false
          example: "Elephant"
          description: Animal's type which should be a single word
        requiredFoodPerDay:
          type: integer
          nullable: false
          minimum: 1
          maximum: 99
          description: Amount of food which is required by animal per day
      required:
        - name
        - requiredFoodPerDay
    AnimalAssigmentDto:
      type: object
      properties:
        name:
          type: string
          nullable: false
          example: "Nancy"
          description: Animal's name. Multiple animals may have that same name
          pattern: '^[A-Za-z]+$'
        type:
          type: string
          nullable: false
          example: "Lion"
          description: Animal's type which should be a single word
          pattern: '^[A-Za-z]+$'
      required:
        - name
        - type
    ExistingAnimal:
      type: object
      allOf:
        - $ref: "#/components/schemas/AnimalAssigmentDto"
      properties:
        id:
          type: integer
          minimum: 0
          description: Animal id
        zone:
          type: string
          example: "FirstZone"
          description: Animal's zone
    ExistingAnimalsList:
      type: object
      properties:
        animalsList:
          type: array
          items:
            $ref: "#/components/schemas/ExistingAnimal"
    ExistingAnimalType:
      type: object
      allOf:
        - $ref: "#/components/schemas/AnimalTypeCreationDto"
      properties:
        id:
          type: integer
          minimum: 0
          description: Animal type id
    ExistingZone:
      allOf:
        - $ref: "#/components/schemas/ZoneCreationDto"
      properties:
        id:
          type: integer
          minimum: 0
          description: Zone id
      required:
        - id
    ExistingZoneFoodReport:
      allOf:
        - $ref: "#/components/schemas/ZoneCreationDto"
      properties:
        currentAmountOfRequiredFood:
          type: integer
          minimum: 0
          description: Minimum current amount of food required by animals in zone.
        id:
          type: integer
          minimum: 0
          description: Zone id
      required:
        - currentAmountOfRequiredFood
    ExistingZoneAnimalsReport:
      allOf:
        - $ref: "#/components/schemas/ZoneCreationDto"
      properties:
        animalsCount:
          type: integer
          minimum: 0
          description: Count of animals in zone.
        id:
          type: integer
          minimum: 0
          description: Zone id
      required:
        - animalsCount
    ErrorCode:
      type: string
      enum:
        - UNKNOWN_ERROR
        - ALREADY_EXISTS
        - ZONE_NOT_FOUND
        - INVALID_INPUT_DATA
        - NO_MORE_FOOD
        - ANIMAL_TYPE_NOT_FOUND
        - NO_ZONES_PRESENT_IN_ZOO
    Error:
      type: object
      properties:
        code:
          $ref: "#/components/schemas/ErrorCode"
        description:
          type: string
          default: ""
          example: "addAnimal.zoneId: must be greater than or equal to 0"
      required:
        - code
  responses:
    ClientError:
      description: Client error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            UnknownError:
              $ref: "#/components/examples/UnknownError"
