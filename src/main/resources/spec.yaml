openapi: 3.0.1
info:
  title: Zoo API
  description: CRUD operations to interact with ZOO system
  version: 1.0.0
servers:
  - url: 'https'

tags:
  - name: zoo

paths:
  /zones:
    post:
      tags:
        - zoo
      operationId: addZone
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ZoneCreationDto"
      responses:
        '201':
          description: Zone has been created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExistingZone"
        '400':
          $ref: "#/components/responses/ClientError"
        '500':
          $ref: "#/components/responses/ServerError"
  /animals/{zoneId}:
    post:
      tags:
        - zoo
      operationId: addAnimal
      parameters:
        - $ref: "#/components/parameters/zoneId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnimalAssigmentDto"
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExistingAnimal"
          description: Created animal and assigned it to the zone
        '400':
          $ref: "#/components/responses/ClientError"
        '500':
          $ref: "#/components/responses/ServerError"
    get:
      tags:
        - zoo
      operationId: getAnimals
      parameters:
        - $ref: "#/components/parameters/zoneId"
        - $ref: "#/components/parameters/size"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/shouldSortByName"
        - $ref: "#/components/parameters/sortDirection"
      responses:
        '200':
          description: Successfully acquired all animals for given zone
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExistingAnimal"
        '400':
          $ref: "#/components/responses/ClientError"
        '500':
          $ref: "#/components/responses/ServerError"
  /animals:
    get:
      tags:
        - zoo
      operationId: getAnimalsByName
      parameters:
        - $ref: "#/components/parameters/size"
        - $ref: "#/components/parameters/page"
        - in: query
          name: animalName
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z]+$'
            description: Animal name which should be a single word
      responses:
        '200':
          description: Successfully acquired the animals for given zone and name
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExistingAnimal"
        '400':
          $ref: "#/components/responses/ClientError"
        '500':
          $ref: "#/components/responses/ServerError"
  /animals/types:
    post:
      tags:
        - zoo
      operationId: addAnimalType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnimalTypeCreationDto"
      responses:
        '201':
          description: Successfully created animal type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExistingAnimalType"
        '400':
          $ref: "#/components/responses/ClientError"
        '500':
          $ref: "#/components/responses/ServerError"
  /zones/which-requires-most-food:
    get:
      tags:
        - zoo
      description: Returns the zone where the most amount of food is required
      operationId: getZoneWhichRequiresMostFood
      responses:
        '200':
          description: Successfully acquired the zone where the most amount of food is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExistingZone"
        '500':
          $ref: "#/components/responses/ServerError"
  /zones/where-live-least-animals:
    get:
      tags:
        - zoo
      description: Returns the zone where live least amount of animals
      operationId: zoneWhereLiveLeastAnimals
      responses:
        '200':
          description: Successfully acquired the zone where live least amount of animals
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExistingZone"
        '500':
          $ref: "#/components/responses/ServerError"

components:
  responses:
    ClientError:
      description: Client error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  parameters:
    zoneId:
      in: path
      name: zoneId
      description: Zone id
      required: true
      schema:
        type: integer
        minimum: 0
    size:
      in: query
      name: size
      description: Size of the page (number of returned elements)
      required: false
      schema:
        type: integer
        minimum: 1
        example: 20
    page:
      in: query
      name: page
      description: Page number
      required: false
      schema:
        type: integer
        minimum: 0
        example: 2
    shouldSortByName:
      in: query
      name: shouldSortByName
      description: If true sorts results by "name" field. Order is selected by sortDirection property
      required: false
      schema:
        type: boolean
        example: true
    sortDirection:
      in: query
      name: sortDirection
      description: Order of sorting
      required: false
      schema:
        type: string
        enum:
          - ASC
          - DESC
  schemas:
    ZoneCreationDto:
      type: object
      properties:
        name:
          type: string
          example: "FirstZone"
          nullable: false
          pattern: '^[A-Za-z]+$'
          description: Zone name which should be without whitespaces
      required:
        - name
    AnimalTypeCreationDto:
      type: object
      properties:
        name:
          type: string
          pattern: '^[A-Za-z]+$'
          nullable: false
          description: Animal's type which should be a single word
        requiredFoodPerDay:
          type: integer
          nullable: false
          minimum: 1
          description: Amount of food which is required by animal per day
    AnimalAssigmentDto:
      type: object
      properties:
        name:
          type: string
          nullable: false
          example: "Nancy"
          description: Animal's name. Multiple animals may have that same name
        type:
          type: string
          nullable: false
          example: "Lion"
          description: Animal's type which should be a single word
          pattern: '^[A-Za-z]+$'
      required:
        - name
        - type
    ExistingAnimal:
      type: object
      allOf:
        - $ref: "#/components/schemas/AnimalAssigmentDto"
      properties:
        id:
          type: integer
          minimum: 0
          description: Animal id
        zone:
          type: string
          description: Animal's zone
    ExistingAnimalType:
      type: object
      allOf:
        - $ref: "#/components/schemas/AnimalTypeCreationDto"
      properties:
        id:
          type: integer
          minimum: 0
          description: Animal type id
    ExistingZone:
      allOf:
        - $ref: "#/components/schemas/ZoneCreationDto"
    Error:
      type: object
      properties:
        code:
          type: string
          example: ALREADY_EXISTS
        description:
          type: string
          default: ""
          example: "addAnimal.zoneId: must be greater than or equal to 0"
      required:
        - code
    ErrorCode:
      type: string
      enum:
        - ALREADY_EXISTS
        - ZONE_NOT_FOUND
        - INVALID_INPUT_DATA
        - NO_MORE_FOOD
        - ANIMAL_TYPE_NOT_FOUND